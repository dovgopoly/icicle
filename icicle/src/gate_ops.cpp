#include "icicle/backend/gate_ops_backend.h"
#include "icicle/dispatcher.h"

namespace icicle {

  /*********************************** EVALUATE ************************/
  ICICLE_DISPATCHER_INST(GateEvaluationDispatcher, gate_evaluation, gateEvaluationImpl);

  extern "C" eIcicleError CONCAT_EXPAND(FIELD, gate_evaluation)(
    const scalar_t* constants, 
    size_t num_constants,
    const scalar_t* fixed, 
    size_t num_fixed_columns,
    const scalar_t* advice, 
    size_t num_advice_columns,
    const scalar_t* instance, 
    size_t num_instance_columns,
    const scalar_t* challenges, 
    size_t num_challenges,
    const int* rotations, 
    size_t num_rotations,
    const scalar_t* beta,
    const scalar_t* gamma,
    const scalar_t* theta,
    const scalar_t* y,
    const scalar_t* previous_value,
    const int* calculations,
    const int* i_value_types,
    const int* j_value_types,
    const int* i_value_indices,
    const int* j_value_indices,
    const int* horner_value_types,
    const int* i_horner_value_indices,
    const int* j_horner_value_indices,
    const int* horner_offsets,
    const int* horner_sizes,
    size_t num_calculations,
    size_t num_intermediates,
    size_t num_elements,
    int rot_scale,
    int isize,
    const GateOpsConfig* config,
    scalar_t* results)
  {
      return GateEvaluationDispatcher::execute(
        constants,
        num_constants,
        fixed,
        num_fixed_columns,
        advice,
        num_advice_columns,
        instance,
        num_instance_columns,
        challenges,
        num_challenges,
        rotations,
        num_rotations,
        beta,
        gamma,
        theta,
        y,
        previous_value,
        calculations,
        i_value_types,
        j_value_types,
        i_value_indices,
        j_value_indices,
        horner_value_types,
        i_horner_value_indices,
        j_horner_value_indices,
        horner_offsets,
        horner_sizes,
        num_calculations,
        num_intermediates,
        num_elements,
        rot_scale,
        isize,
        *config,
        results
      );
  }

  template <>
  eIcicleError gate_evaluation(
    const scalar_t* constants,
    size_t num_constants,
    const scalar_t* fixed,
    size_t num_fixed_columns,
    const scalar_t* advice,
    size_t num_advice_columns,
    const scalar_t* instance,
    size_t num_instance_columns,
    const scalar_t* challenges,
    size_t num_challenges,
    const int* rotations,
    size_t num_rotations,
    const scalar_t* beta,
    const scalar_t* gamma,
    const scalar_t* theta,
    const scalar_t* y,
    const scalar_t* previous_value,
    const int* calculations,
    const int* i_value_types,
    const int* j_value_types,
    const int* i_value_indices,
    const int* j_value_indices,
    const int* horner_value_types,
    const int* i_horner_value_indices,
    const int* j_horner_value_indices,
    const int* horner_offsets,
    const int* horner_sizes,
    size_t num_calculations,
    size_t num_intermediates,
    size_t num_elements,
    int rot_scale,
    int isize,
    const GateOpsConfig& config,
    scalar_t* results)
  {
    return CONCAT_EXPAND(FIELD, gate_evaluation)(
      constants,
      num_constants,
      fixed,
      num_fixed_columns,
      advice,
      num_advice_columns,
      instance,
      num_instance_columns,
      challenges,
      num_challenges,
      rotations,
      num_rotations,
      beta,
      gamma,
      theta,
      y,
      previous_value,
      calculations,
      i_value_types,
      j_value_types,
      i_value_indices,
      j_value_indices,
      horner_value_types,
      i_horner_value_indices,
      j_horner_value_indices,
      horner_offsets,
      horner_sizes,
      num_calculations,
      num_intermediates,
      num_elements,
      rot_scale,
      isize,
      &config,
      results
    );
  }
}